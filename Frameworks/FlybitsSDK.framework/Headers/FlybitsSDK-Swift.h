// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreLocation;
@import Dispatch;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// APIManager is a wrapper for use with Objective-C based projects.
SWIFT_CLASS("_TtC10FlybitsSDK10APIManager")
@interface APIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum StorageType : NSInteger;
@class UploadServiceTime;
@class Properties;

/// The <code>Analytics</code> class is the access point for all Analytics
/// based operations in Flybits. It handles both the storing of
/// logged events which the user calls to be recorded, as well as
/// flushing all stored data.
/// It is required that you first initialize <code>Session</code> with an api key
/// before using this class.
SWIFT_CLASS("_TtC10FlybitsSDK9Analytics")
@interface Analytics : NSObject
/// Singleton access to the Analytics, <code>configure</code> allows to modify default settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Analytics * _Nonnull shared;)
+ (Analytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Custom device identifier for events
@property (nonatomic, readonly, copy) NSString * _Nullable customDeviceId;
/// Storage type for events, defaults to coreData
@property (nonatomic, readonly) enum StorageType storageType;
/// Uplaod service time
@property (nonatomic, readonly, strong) UploadServiceTime * _Nullable serviceTime;
/// The amount of time between each flush.
@property (nonatomic, readonly) double timeForDataFlush;
/// The amount of time to wait before retry if an error occurs during flush.
@property (nonatomic, readonly) double timeForDataFlushFlex;
/// Configures analytics that are established by the application
/// developer when the application is first started.
/// \param storageType The preferred storage type, i.e.,
/// Core Data or memory
///
/// \param uploadServiceTime The time parameters that
/// describe the manner in which analytics will be sent to
/// the server.
///
/// \param customDeviceId A device ID
///
- (BOOL)configureWithStorageType:(enum StorageType)storageType uploadServiceTime:(UploadServiceTime * _Nullable)uploadServiceTime customDeviceId:(NSString * _Nullable)customDeviceId error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Sends all queued up events stored on the phone to their appropriate channels.
- (void)flushEvents;
/// Sets a flag to abort any currently running flushes and shuts
/// down Analytics.
- (void)cancelFlush;
/// Logs an event with name <code>eventName</code> with an optional parameter
/// of <code>Properties</code>
/// \param eventName The name of the event to be logged.
///
/// \param properties The custom <code>Properties</code> this event
/// may have.
///
- (void)logEventWithEventName:(NSString * _Nonnull)eventName properties:(Properties * _Nullable)properties;
/// Logs and starts a timed event with the given <code>Properties</code>.
/// It will be sent to all upload channels including Flybits’.
/// \param eventName The name of the event to be logged.
///
/// \param properties The custom <code>Properties</code> this event
/// may have.
///
///
/// returns:
/// A reference to the started event is returned. This is used to end the timed event.
- (NSInteger)startTimedEventWithEventName:(NSString * _Nonnull)eventName properties:(Properties * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Logs that the timed event has ended.
/// \param reference The reference to the started timed
/// event that will end.
///
///
/// returns:
/// A boolean representing a successfully added analytics
/// event to <code>queueStorage</code>
- (BOOL)endTimedEventWithReference:(NSInteger)reference SWIFT_WARN_UNUSED_RESULT;
@end

/// Storage type for events
typedef SWIFT_ENUM(NSInteger, StorageType) {
  StorageTypeCoreData = 0,
  StorageTypeMemory = 1,
};

enum FlybitsUtilitiesTimeUnit : int32_t;

/// UploadServiceTime: The time parameters that describe
/// the manner in which analytics will be sent to the server.
SWIFT_CLASS("_TtCC10FlybitsSDK9Analytics17UploadServiceTime")
@interface UploadServiceTime : NSObject
@property (nonatomic, readonly) double timeUpdate;
@property (nonatomic, readonly) double timeFlex;
@property (nonatomic, readonly) enum FlybitsUtilitiesTimeUnit metric;
- (nonnull instancetype)initWith:(double)timeUpdate timeFlex:(double)timeFlex metric:(enum FlybitsUtilitiesTimeUnit)metric OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The <code>AnonymousIDP</code> class is responsible for creating an anonymous Flybits account.
SWIFT_CLASS("_TtC10FlybitsSDK12AnonymousIDP")
@interface AnonymousIDP : NSObject
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;
enum BooleanQueryOp : NSInteger;

/// BooleanQuery allows certain fields of the request query to be evaluated using boolean
/// expression to retrieve data from Flybits.
/// For example:
/// You can query to get content based on their label if they satisfy the following expression:
/// \code
/// let eq1 = BooleanQuery()
/// .orItem("Q")
/// .andItems(["A", "B"], .AND)
///
/// // equivalent to Q && (A && B)
///
/// \endcodeObjC example:
/// \code
/// BooleanQuery *query = [[BooleanQuery alloc] init:@"A"];
/// [query AND:@[@"B", @"C"] op: BooleanQueryOpAND];
/// [query OR:@"D"];
/// [query AND:@"E"];
/// [query AND:@[@"F", @"G"] op: BooleanQueryOpAND];
/// [query OR:@[@"H", @"I"] op: BooleanQueryOpAND];
/// [query OR:@"J"];
///
/// \endcode
SWIFT_CLASS("_TtC10FlybitsSDK12BooleanQuery")
@interface BooleanQuery : NSObject
@property (nonatomic, readonly, strong) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize BooleanQuery with single item
/// \param value initial item for the expression
///
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Initialize BooleanQuery with array of items and each item in the array is the
/// operand and <code>op</code> as the operator.
/// \param values items that to be appended to the expression using the operator
///
/// \param op Operator to be used between each items in the values when building the expression
///
- (nonnull instancetype)initWithValues:(NSArray<NSString *> * _Nonnull)values op:(enum BooleanQueryOp)op OBJC_DESIGNATED_INITIALIZER;
/// Append <code>item</code> using .AND operator
/// \param item Value to be appended to the boolean expression
///
///
/// returns:
/// Returns <code>self</code> so calls can be chained
- (BooleanQuery * _Nonnull)and:(NSString * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// Append array of <code>items</code> using .AND operator to the expression but each item
/// within the <code>items</code> are appended using <code>op</code>.
/// For example:
/// <h2>Q && (C || D)</h2>
/// // Swift
/// let eq1 = BooleanQuery()
/// .OR(“Q”)
/// .AND([“C”, “D”], .OR)
/// // ObjC
/// BooleanQuery *eq1 = [[BooleanQuery query:@“Q”] AND:@[@“C”, @“D”] op: BooleanQueryOpOR];
/// <h2>Q && (C && D)</h2>
/// // Swift
/// let eq2 = BooleanQuery()
/// .OR(“Q”)
/// .AND([“C”, “D”], .AND)
/// // ObjC
/// BooleanQuery *eq2 = [[BooleanQuery query:@“Q”] AND:@[@“C”, @“D”] op: BooleanQueryOpAND];
/// \param item Value to be appended to the boolean expression
///
/// \param op Operator to be used between each items in the values when building the expression
///
///
/// returns:
/// Returns <code>self</code> so calls can be chained
- (BooleanQuery * _Nonnull)and:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op SWIFT_WARN_UNUSED_RESULT;
/// Append <code>item</code> to the expression using OR operator
/// \param item Value to be appended to the boolean expression
///
///
/// returns:
/// Returns <code>self</code> so calls can be chained
- (BooleanQuery * _Nonnull)or:(NSString * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// Append array of <code>items</code> using .OR operator but each item within the <code>items</code>
/// are appended using <code>op</code>.
/// For example:
/// <h2>Q || (C || D)</h2>
/// // Swift
/// let eq1 = BooleanQuery()
/// .OR(“Q”)
/// .OR([“C”, “D”], .OR)
/// // ObjC
/// BooleanQuery *eq1 = [[BooleanQuery query:@“Q”] OR:@[@“C”, @“D”] op: BooleanQueryOpOR];
/// <h2>Q || (C && D)</h2>
/// // Swift
/// let eq2 = BooleanQuery()
/// .OR(“Q”)
/// .OR([“C”, “D”], .AND)
/// // ObjC
/// BooleanQuery *eq2 = [[BooleanQuery query:@“Q”] OR:@[@“C”, @“D”] op: BooleanQueryOpAND];
/// \param item Value to be appended to the boolean expression
///
/// \param op Operator to be used between each items in the values when building the expression
///
///
/// returns:
/// Returns <code>self</code> so calls can be chained
- (BooleanQuery * _Nonnull)or:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op SWIFT_WARN_UNUSED_RESULT;
/// Constructs a <code>BooleanQuery</code> with the specified item negated
/// \param item The item to negate
///
///
/// returns:
/// A <code>BooleanQuery</code> containing the negated item
+ (BooleanQuery * _Nonnull)NOT:(NSString * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// Constructs a <code>BooleanQuery</code> with the specified list of items negated
/// with each item separated by <code>op</code>.
/// \param items The list of items to append to the boolean expression.
///
/// \param op The operator to be used between each item specified in <code>items</code>.
///
///
/// returns:
/// A <code>BooleanQuery</code> containing the negated items
+ (BooleanQuery * _Nonnull)NOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op SWIFT_WARN_UNUSED_RESULT;
/// ANDs a negated version of the element in the resulting query string.
/// \param item The item to negate as well as AND to the existing expression.
///
///
/// returns:
/// A <code>BooleanQuery</code> to allow for chained construction.
- (BooleanQuery * _Nonnull)ANDNOT:(NSString * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// ANDs a negated version of the elements in the resulting query string.
/// \param items The list of items to negate as well as AND to the existing expression.
///
/// \param op The operator to be used between each item specified in <code>items</code>.
///
///
/// returns:
/// A <code>BooleanQuery</code> to allow for chained construction.
- (BooleanQuery * _Nonnull)ANDNOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op SWIFT_WARN_UNUSED_RESULT;
@end


@interface BooleanQuery (SWIFT_EXTENSION(FlybitsSDK))
/// Creates a BooleanQuery object with ‘item’
+ (BooleanQuery * _Nonnull)query:(NSString * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
/// Creates a BooleanQuery object with ‘items’ where ‘op’ is used to combine each item in items.
+ (BooleanQuery * _Nonnull)query:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op SWIFT_WARN_UNUSED_RESULT;
@end

/// Supported operators for BooleanQuery when combining
/// Multiple items together
typedef SWIFT_ENUM(NSInteger, BooleanQueryOp) {
  BooleanQueryOpAnd = 0,
  BooleanQueryOpOr = 1,
};


@interface CLLocation (SWIFT_EXTENSION(FlybitsSDK))
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Error types for <code>Analytics</code> configuration
typedef SWIFT_ENUM(NSInteger, ConfigurationError) {
  ConfigurationErrorHasStoredEvents = 0,
  ConfigurationErrorApiKeyNotSet = 1,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"FlybitsSDK.ConfigurationError";

@class FlybitsRequest;

/// The <code>FlyAuthentication</code> class handles connecting and disconnecting a user account.
SWIFT_CLASS("_TtC10FlybitsSDK17FlyAuthentication")
@interface FlyAuthentication : NSObject
/// The <code>disconnect</code> method is responsible for disconnecting the identity provider to the Flybits.
/// \param completionHandler A completion closure that returns the JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)disconnectWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>FlyJWT</code> class handles refreshing of token with the Flybits server.
SWIFT_CLASS("_TtC10FlybitsSDK6FlyJWT")
@interface FlyJWT : NSObject
/// The <code>refreshJWT</code> method is responsible for refreshing and updating the JWT token with the FLybits server.
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)refreshJWTWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class User;

/// The <code>FlyUser</code> class handles fetching and deleting a user account.
SWIFT_CLASS("_TtC10FlybitsSDK7FlyUser")
@interface FlyUser : NSObject
/// The <code>get</code> method is responsible for fetching the user account information.
/// \param completionHandler A completion closure that returns the connected <code>User</code> on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)getWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>delete</code> method is responsible for destroying the user account information.
/// \param completionHandler A completion closure that returns the JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)deleteWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>FlybitsIDP</code> class is responsible for creating or connecting a Flybits user account.
SWIFT_CLASS("_TtC10FlybitsSDK10FlybitsIDP")
@interface FlybitsIDP : NSObject
/// Initializer used to register and create a user account for Flybits.
/// \param email The email account for a Flybits user.
///
/// \param password The password for a Flybits user.
///
/// \param firstName The first name of a user.
///
/// \param lastName The last name of a user.
///
- (nonnull instancetype)initWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName;
/// Initializer used to connect a user account for Flybits.
/// \param email The email account for a Flybits user.
///
/// \param password The password for a Flybits user.
///
- (nonnull instancetype)initWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
/// The <code>requestNewPassword</code> method is responsible for requesting a new password for a Flybits user account.
/// \param email The email account for a Flybits user to request new password.
///
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)requestNewPasswordWithEmail:(NSString * _Nonnull)email completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>changePassword</code> method is responsible for changing old password to a new password for a Flybits user account.
/// \param currentPassword The current password for a Flybits user account.
///
/// \param newPassword The new password for a Flybits user account.
///
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)changePasswordWithCurrentPassword:(NSString * _Nonnull)currentPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum Environment : NSInteger;

/// The <code>FlybitsManager</code> class is a primary integration point for all SDKs
/// and is responsible for defining all <code>FlybitsScope</code>’s as well as
/// performing <code>User</code> operations such as logging in, logging out, disabling account,
/// resetting password and refreshing the JWT token.
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsManager")
@interface FlybitsManager : NSObject
/// Unique Flybits Project ID for your project.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified projectID;
/// Language codes used for localizations.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull languageCodes;
/// Adds a language code for localization.
- (void)addWithLanguageCode:(NSString * _Nonnull)languageCode;
/// The <code>connect</code> method is responsible for connecting the identity provider to the Flybits.
/// On successful connection, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onConnected</code> method.
/// \param completionHandler A completion closure that returns the connected <code>User</code> on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)connectWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>disconnect</code> method is responsible for disconnecting and clearing the session with Flybits.
/// On successfully disconnecting, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onDisconnected</code> method.
/// \param completionHandler A completion closure that returns the disconnected JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)disconnectWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>destroy</code> method is responsible for destroying the user account and
/// clearing the session with Flybits.
/// On successfully destroying, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onAccountDestroyed</code> method.
/// \param completionHandler A completion closure that returns the destroyed JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)destroyWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>getUser</code> method is responsible for fetching the user account information.
/// \param completionHandler A completion closure that returns the <code>User</code> on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)getUserWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Enables logging for debugging
+ (void)enableLogging;
/// Environment (Production must be used for apps).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum Environment environment;)
+ (enum Environment)environment SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvironment:(enum Environment)value;
/// Gateway URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gatewayURL;)
+ (NSString * _Nonnull)gatewayURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Environment.
typedef SWIFT_ENUM(NSInteger, Environment) {
  EnvironmentProduction = 0,
  EnvironmentProduction_Europe = 1,
  EnvironmentStaging = 2,
  EnvironmentDevelopment = 3,
};

enum FlybitsRequestType : NSInteger;
@class NSHTTPURLResponse;

/// The base network request.
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsRequest")
@interface FlybitsRequest : NSObject
/// Queue on which the completion block from response will be called. Uses main queue by default.
@property (nonatomic, strong) dispatch_queue_t _Null_unspecified completionCallbackQueue;
/// Readonly access to the underlying NSURLRequest
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable urlRequest;
/// Requests to wait before timing out when no data is retrieved – session is recreated so set this early as possible; Internally sets <code>NSURLSessionConfiguration.timeoutIntervalForRequest</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSTimeInterval timeoutIntervalForRequest;)
+ (NSTimeInterval)timeoutIntervalForRequest SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeoutIntervalForRequest:(NSTimeInterval)value;
/// Constructs a new request based on an NSURLRequest.
/// \param request An NSURLRequest object.
///
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSURLRequest * _Nullable)request type:(enum FlybitsRequestType)type error:(NSError * _Nullable)error;
- (FlybitsRequest * _Nonnull)setHttpSuccessStatusCode:(NSInteger)httpSuccessStatusCode SWIFT_WARN_UNUSED_RESULT;
- (FlybitsRequest * _Nonnull)setHttpSuccessStatusCodeWithLowerBound:(NSInteger)lower upperBound:(NSInteger)upper SWIFT_WARN_UNUSED_RESULT;
/// Uses Generics to serialize the server’s response into an object of the specified type.
/// \param withCompletion A closure that returns the original request, the response, the serialized object and an error.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (nonnull instancetype)responseWithCompletion:(void (^ _Nonnull)(NSURLRequest * _Nullable, NSHTTPURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Cancels a FlybitsRequest.
- (FlybitsRequest * _Nonnull)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10FlybitsSDK18FlybitsRequestList")
@interface FlybitsRequestList : FlybitsRequest
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRequests:(NSArray<FlybitsRequest *> * _Nonnull)requests OBJC_DESIGNATED_INITIALIZER;
- (FlybitsRequest * _Nonnull)cancel SWIFT_WARN_UNUSED_RESULT;
- (void)add:(FlybitsRequest * _Nonnull)request;
- (void)remove:(FlybitsRequest * _Nonnull)request;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type SWIFT_UNAVAILABLE;
@end

/// A list of possible request types for a Requestable.
typedef SWIFT_ENUM(NSInteger, FlybitsRequestType) {
/// A core request (inherent to Flybits core, i.e. <code>Content</code>, <code>User</code>)
  FlybitsRequestTypeGateway = 0,
/// A rule request (<code>Rule</code> based requests)
  FlybitsRequestTypeRules = 1,
/// A context data update request
  FlybitsRequestTypeContextUpdate = 2,
/// A push request (<code>APNS</code> and <code>MQTT</code> based requests)
  FlybitsRequestTypePush = 3,
/// A custom request
  FlybitsRequestTypeCustom = 4,
};


@interface NSHTTPURLResponse (SWIFT_EXTENSION(FlybitsSDK))
@end


@interface NSObject (SWIFT_EXTENSION(FlybitsSDK))
@end


/// A structure containing many constants used internally in the SDK
SWIFT_CLASS("_TtC10FlybitsSDK7Network")
@interface Network : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class containing a number of constants used for Networking purposes.
SWIFT_CLASS("_TtC10FlybitsSDK16NetworkConstants")
@interface NetworkConstants : NSObject
/// The maximum number of records the server can return in one request (500)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger APIMaxRecords;)
+ (NSUInteger)APIMaxRecords SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>OAuthIDP</code> class is responsible for creating a specific Identity Provider (IDP) that
/// is managed by a OAuth based 3rd party integration such Facebook or Google.
SWIFT_CLASS("_TtC10FlybitsSDK8OAuthIDP")
@interface OAuthIDP : NSObject
/// Initializer used to register an OAuth identity provider using <code>provider</code> name,
/// <code>accessToken</code> and <code>clientID</code> in order to successfully connect to the IDP.
/// \param provider The provider name of the OAuth provider.
///
/// \param accessToken The <code>accessToken</code> of the OAuth provider.
///
/// \param clientID The <code>clientID</code> of the OAuth provider.
///
- (nonnull instancetype)initWithProvider:(NSString * _Nonnull)provider accessToken:(NSString * _Nonnull)accessToken clientID:(NSString * _Nullable)clientID OBJC_DESIGNATED_INITIALIZER;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// If there are lot of items to be returned, for performance reason, pagination should be used. Even if you do not indicate pagination, response might be paginated.
/// By setting <code>limit</code> and <code>offset</code>, you can retrieve different “pages” of data. For example, you might want to display first 20 items (experiences/content/etc). So, by using pagination as shown below, you will receive the first 20 items.
/// \code
/// // First 20 items or first page with 20 items
/// let pager = Pager(limit:20, offset:0)
///
/// \endcodeTo get the next page or next 20 items:
/// \code
/// // Second 20 items or second page with 20 items
/// let pager = Pager(limit:20, offset:20)
///
/// \endcode
SWIFT_CLASS("_TtC10FlybitsSDK5Pager")
@interface Pager : NSObject
/// Maximum number of results that can be returned in a paged API call.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSUInteger MaxResults;)
+ (NSUInteger)MaxResults SWIFT_WARN_UNUSED_RESULT;
/// The maximum number of records to return on this page.
@property (nonatomic, readonly) NSUInteger limit;
/// The offset into the total number of records at which to start the result set.
@property (nonatomic, readonly) NSUInteger offset;
/// The property by which objects are sorted on.
@property (nonatomic, readonly, copy) NSString * _Nullable sortBy;
/// Failable initializer that returns a <code>Pager</code> based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// Updates the pager to a specific page index (limit/offset calculation is done for you)
/// \param pageIndex The page number.
///
- (void)goto:(NSUInteger)pageIndex;
/// Converts the pager into a dictionary (used when sent via an API request).
///
/// returns:
/// A dictionary containing the <code>limit</code> and <code>offset</code> properties.
/// Additionally, if non-nil, <code>sortBy</code> and <code>sortOrder</code> will be appended as well.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Converts the pager to a set of parameters to be sent as part of a URL.
/// Intended to be used only with GET requests.
- (NSString * _Nonnull)toURLParamsWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// Convenience function to determine if the result set is at the end of the list.
///
/// returns:
/// <code>true</code> if there are additional results through which to page, <code>false</code> otherwise.
- (BOOL)hasMore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum FlybitsUtilitiesSortOrder : NSInteger;

@interface Pager (SWIFT_EXTENSION(FlybitsSDK))
/// A public constructor for Objective-C clients.
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the record set.
///
/// \param sortBy A <code>String</code> of the property name to sort on.
///
/// \param sortOrder A <code>String</code> representing ascending or descending
/// sort order, namely, <code>asc</code> or <code>desc</code>. If the string is neither or is nil,
/// no sort will be applied.
///
///
/// returns:
/// A Pager object representing the provided limit and offset.
+ (Pager * _Nonnull)pagerWithLimit:(NSUInteger)limit offset:(NSUInteger)offset sortBy:(NSString * _Nonnull)sortBy sortOrder:(enum FlybitsUtilitiesSortOrder)sortOrder SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;

SWIFT_CLASS("_TtC10FlybitsSDK10Properties")
@interface Properties : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull items;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nullable)toJSON SWIFT_WARN_UNUSED_RESULT;
- (void)addProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key;
@end


/// Base class for creating queries to retrieve experiences/content.
/// When creating a query, you can define which fields to be included with the
/// response and which fields should be omitted. If the API supports pagination,
/// then certain chunk of data can be retrieved at one time using <code>Pager</code>.
/// You can subclass Query and override <code>func toDictionary() -> [String:String]</code> to
/// return key-value pairs which will be turned into the URL path for a request.
SWIFT_CLASS("_TtC10FlybitsSDK5Query")
@interface Query : NSObject
/// Name of the properties of models that should ONLY be included in the response (anything you don’t list here will be left out or set to <code>null</code>)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable includes;
/// Name of the properties of models that should be excluded in the response.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable excludes;
/// The pager object, used to page an API.
@property (nonatomic, strong) Pager * _Nonnull pager;
/// <code>limit</code> and <code>offset</code> are used for pagination. Get items starting at <code>offset</code> and returns number of items upto <code>limit</code>.
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the recordset to start.
///
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
/// Creates a pager with default limit of 10 and offset of 0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A convenience function for creating a default <code>Query</code>.
///
/// returns:
/// A <code>Query</code> object.
+ (nonnull instancetype)query SWIFT_WARN_UNUSED_RESULT;
/// A convenience function for creating a <code>Query</code> with a limit and no offset.
/// \param limit The maximum number of records to return.
///
///
/// returns:
/// A <code>Query</code> object.
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit SWIFT_WARN_UNUSED_RESULT;
/// A convenience function for creating a <code>Query</code> with a limit and offset.
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the recordset to start.
///
///
/// returns:
/// A <code>Query</code> object.
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit andOffset:(NSUInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// Returns key-value pair for URL path
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Override to pretty-print the <code>Query</code>’s debug description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Override to pretty-print the <code>Query</code>’s description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// The <code>SharedElements</code> class is responsible for managing various session based information
/// that can be shared across Flybits SDKs.
SWIFT_CLASS("_TtC10FlybitsSDK14SharedElements")
@interface SharedElements : NSObject
/// Unique Flybits Project ID.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable projectID;)
+ (NSString * _Nullable)projectID SWIFT_WARN_UNUSED_RESULT;
/// Device ID of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable deviceID;)
+ (NSString * _Nullable)deviceID SWIFT_WARN_UNUSED_RESULT;
/// User ID of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable userID;)
+ (NSString * _Nullable)userID SWIFT_WARN_UNUSED_RESULT;
/// Connected IDP provider name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable connectedIDP;)
+ (NSString * _Nullable)connectedIDP SWIFT_WARN_UNUSED_RESULT;
/// JWT token of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable jwtToken;)
+ (NSString * _Nullable)jwtToken SWIFT_WARN_UNUSED_RESULT;
/// Language codes for localizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nullable languageCodes;)
+ (NSArray<NSString *> * _Nullable)languageCodes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>SignedIDP</code> class is responsible for creating a specific Identity Provider (IDP) that
/// can be logged into using the SAML protocol.
SWIFT_CLASS("_TtC10FlybitsSDK9SignedIDP")
@interface SignedIDP : NSObject
/// Initializer used to register a Signed identity provider using <code>provider</code>,
/// <code>accessToken</code> and <code>clientID</code> in order to successfully connect to the IDP.
/// \param provider The provider name of the OAuth provider.
///
/// \param accessToken The <code>accessToken</code> of the OAuth provider.
///
/// \param signature The <code>signature</code> of the OAuth provider.
///
- (nonnull instancetype)initWithProvider:(NSString * _Nonnull)provider accessToken:(NSString * _Nonnull)accessToken signature:(NSString * _Nonnull)signature OBJC_DESIGNATED_INITIALIZER;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The <code>User</code> class represents a specific user and is used to store information
/// about a person who has registered an account with Flybits.
SWIFT_CLASS("_TtC10FlybitsSDK4User")
@interface User : NSObject
/// The unique identifier of the <code>User</code> (<code>identifier</code> in Objective-C).
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Device user currently logged in.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceID;
/// First name
@property (nonatomic, copy) NSString * _Nullable firstname;
/// Last name
@property (nonatomic, copy) NSString * _Nullable lastname;
/// Email
@property (nonatomic, copy) NSString * _Nullable email;
/// Failable initializer that returns an <code>User</code> object based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// Compares two <code>User</code>s for equality.
/// \param object Another <code>User</code> (<code>NSObject.isEqual()</code> is used if object is not a <code>User</code>).
///
///
/// returns:
/// <code>true</code> if two <code>User</code>s have the same <code>id</code>, <code>false</code> otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The <code>User</code>’s hash value (used when treated as an <code>NSObject</code>).
@property (nonatomic, readonly) NSUInteger hash;
/// The <code>User</code>’s hash value (used when treated as an <code>NSObject</code>).
@property (nonatomic, readonly) NSInteger hashValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSDateFormatter;

/// A set of utilities to access common iOS properties.
SWIFT_CLASS_NAMED("Utilities")
@interface FlybitsUtilities : NSObject
/// Determines whether or not this is a simulator build.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL IsSimulator;)
+ (BOOL)IsSimulator SWIFT_WARN_UNUSED_RESULT;
/// The Flybits SDK version number in the Major.Minor.Patch format.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// The Vendor <code>UUID</code> returned from UIDevice.currentDevice().identifierForVendor (handles nullable type)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vendorUUID;)
+ (NSString * _Nonnull)vendorUUID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSDateFormatter * _Nonnull dateFormatter;)
+ (NSDateFormatter * _Nonnull)dateFormatter SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nonnull)CreateNSErrorUserInfo:(NSString * _Nonnull)description failure:(NSString * _Nullable)failure recovery:(NSString * _Nullable)recovery SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceType;)
+ (NSString * _Nonnull)deviceType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Sort order.
typedef SWIFT_ENUM_NAMED(NSInteger, FlybitsUtilitiesSortOrder, "SortOrder") {
/// Results should be sorted in <code>Ascending</code> order
  FlybitsUtilitiesSortOrderAscending = 0,
/// Results should be sorted in <code>Descending</code> order
  FlybitsUtilitiesSortOrderDescending = 1,
};

/// Time unit.
typedef SWIFT_ENUM_NAMED(int32_t, FlybitsUtilitiesTimeUnit, "TimeUnit") {
  FlybitsUtilitiesTimeUnitSeconds = 1,
  FlybitsUtilitiesTimeUnitMinutes = 60,
  FlybitsUtilitiesTimeUnitHours = 3600,
  FlybitsUtilitiesTimeUnitDays = 86400,
};

#pragma clang diagnostic pop
